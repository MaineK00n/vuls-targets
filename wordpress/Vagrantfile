# -*- mode: ruby -*-
# vi: set ft=ruby :

# All Vagrant configuration is done below. The "2" in Vagrant.configure
# configures the configuration version (we support older styles for
# backwards compatibility). Please don't change it unless you know what
# you're doing.
Vagrant.configure("2") do |config|
  # The most common configuration options are documented and commented below.
  # For a complete reference, please see the online documentation at
  # https://docs.vagrantup.com.

  # Every Vagrant development environment requires a box. You can search for
  # boxes at https://vagrantcloud.com/search.
  config.vm.box = "generic/ubuntu2004"

  # Disable automatic box update checking. If you disable this, then
  # boxes will only be checked for updates when the user runs
  # `vagrant box outdated`. This is not recommended.
  # config.vm.box_check_update = false

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine. In the example below,
  # accessing "localhost:8080" will access port 80 on the guest machine.
  # NOTE: This will enable public access to the opened port
  # config.vm.network "forwarded_port", guest: 80, host: 8080

  # Create a forwarded port mapping which allows access to a specific port
  # within the machine from a port on the host machine and only allow access
  # via 127.0.0.1 to disable public access
  # config.vm.network "forwarded_port", guest: 80, host: 8080, host_ip: "127.0.0.1"
  
  # Create a private network, which allows host-only access to the machine
  # using a specific IP.
  # config.vm.network "private_network", ip: "192.168.56.10"

  # Create a public network, which generally matched to bridged network.
  # Bridged networks make the machine appear as another physical device on
  # your network.
  # config.vm.network "public_network"

  # Share an additional folder to the guest VM. The first argument is
  # the path on the host to the actual folder. The second argument is
  # the path on the guest to mount the folder. And the optional third
  # argument is a set of non-required options.
  # config.vm.synced_folder "../data", "/vagrant_data"

  # Provider-specific configuration so you can fine-tune various
  # backing providers for Vagrant. These expose provider-specific options.
  # Example for VirtualBox:
  #
  # config.vm.provider "virtualbox" do |vb|
  #   # Display the VirtualBox GUI when booting the machine
  #   vb.gui = true
  #
  #   # Customize the amount of memory on the VM:
  #   vb.memory = "1024"
  # end
  #
  # View the documentation for the provider you are using for more
  # information on available options.

  # Enable provisioning with a shell script. Additional provisioners such as
  # Ansible, Chef, Docker, Puppet and Salt are also available. Please see the
  # documentation for more information about their specific syntax and use.
  config.vm.provision "shell", inline: <<-SHELL
    debconf-set-selections <<< "mysql-server mysql-server/root_password password password"
    debconf-set-selections <<< "mysql-server mysql-server/root_password_again password password"
    apt-get update
    apt-get install -y apache2 php mysql-server php-mysql csh
    mysql -uroot -ppassword -e "DROP DATABASE IF EXISTS wordpress"
    mysql -uroot -ppassword -e "DROP USER IF EXISTS wordpress"
    mysql -uroot -ppassword -e "CREATE USER 'wordpress'@'%' IDENTIFIED BY 'password'"
    mysql -uroot -ppassword -e "GRANT ALL PRIVILEGES ON *.* to 'wordpress'@'%'"
    
    # wp-cli install
    curl -O https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar
    chmod +x wp-cli.phar
    mv wp-cli.phar /usr/local/bin/wp

    # wordpress install
    rm -rf /var/www/html
    mkdir -p /var/www/html
    chown vagrant: /var/www/html
    sudo -u vagrant -i -- wp core download --path=/var/www/html
    sudo -u vagrant -i -- wp config create --dbname=wordpress --dbuser=wordpress --dbpass=password --path=/var/www/html
    sudo -u vagrant -i -- wp db create --dbuser=wordpress --dbpass=password --path=/var/www/html
    sudo -u vagrant -i -- wp core install --url=wpclidemo.dev --title="WP-CLI" --admin_user=wpcli --admin_password=wpcli --admin_email=info@wp-cli.org --path=/var/www/html
    
    # for root ssh login
    rm -rf /root/.ssh
    mkdir /root/.ssh
    cp /home/vagrant/.ssh/authorized_keys /root/.ssh
    chmod 700 /root/.ssh
    chmod 644 /root/.ssh/authorized_keys

    # add vuls user
    userdel -r vuls
    useradd -s $(which csh) -m -p $(openssl passwd -crypt "vuls") vuls
    rm -rf /home/vuls/.ssh
    mkdir /home/vuls/.ssh
    cp /home/vagrant/.ssh/authorized_keys /home/vuls/.ssh
    chmod 700 /home/vuls/.ssh
    chmod 644 /home/vuls/.ssh/authorized_keys
    chown -R vuls:vuls /home/vuls/.ssh
  SHELL
end
